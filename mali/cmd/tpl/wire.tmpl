// Code generated by MaliBoot. DO NOT EDIT.

package main

import (
    "github.com/google/wire"
    "github.com/maliboot/mago"
    {{- range $key, $value := .TplArgs.Imports }}
    {{ $value }} "{{ $key }}" {{ end }}
)

type Container struct {
    {{- range $rcKey, $rcValue := .TplArgs.Routers }}
    {{ $rcValue.Uniqid }} *{{ $rcKey }}{{ end }}
}

func (c *Container) Inject(s mago.Server)  {
	if http,ok := s.(*mago.Http); ok {
        {{- range $rcKey, $rcValue := .TplArgs.Routers }}
        {{- range $rmKey, $rmValue := $rcValue.Methods }}
        {{- range $rmIndex, $rm := $rmValue.Methods }}
        http.{{ $rm }}("{{ $rmValue.Path }}", c.{{ $rcValue.Uniqid }}.{{ $rmValue.Name }}){{ end }}{{ end }}{{ end }}
	}
}

{{- range .TplArgs.AutoloadFuncs }}

func New{{ .Name }}Conf(c *_mbconf.Conf) *{{ .RefName }}.{{ .Name }} {
	var conf = struct {
		redis *{{ .RefName }}.{{ .Name }} `yaml:"{{ .LcName }}"`
	}{}

	err := c.Scan(&conf)
	if err != nil {
		fmt.Printf("custom config decode err:%v", err)
	}
	return conf.{{ .LcName }}
}{{ end }}

var InjectProviderSet = wire.NewSet(
    {{- range .TplArgs.AutoloadFuncs }}
    {{ .InjectFunc }},{{ end }}
    {{- range $key, $value := .TplArgs.BindStructs }}
    wire.Bind(new({{ $key }}), new(*{{ $value }})),{{ end }}
    {{- range .TplArgs.InjectsFuncs }}
    {{ . }},{{ end }}
    {{- range $rcKey, $rcValue := .TplArgs.Routers }}
    wire.Struct(new({{ $rcKey }}), "*"),{{ end }}
    wire.Struct(new(Container), "*"),
)